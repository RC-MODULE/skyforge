#!/bin/bash
# Copyright Â© 2016 Andrew Andrianov <andrew@ncrmnt.org>
# This work is free. You can redistribute it and/or modify it under the terms
# of MIT license. See LICENSE.TXT bundled along with the software for details

PREVIOUS=
CURRENT=

CURRENT_STEP=0
SAVE_STEPS=0
WORKDIR=.forge
DRY_RUN=0
NEED_RESTORE=0
RERUN_FOLLOWING=0
CLEANUP=
SKIP_CHECKPOINTING="EXT4IMAGE EXT3IMAGE EXT2IMAGE STORE DISKIMAGE"

if [ -z "$SKYFILE" ]; then
  SKYFILE=Skyfile
fi

skyforge_init()
{
  [ -d $WORKDIR ] || mkdir -p $WORKDIR
  [ -d $WORKDIR/.bottom ] || mkdir -p $WORKDIR/.bottom
  echo "$WORKDIR/.bottom" > $WORKDIR/.stack

  if [ -f $WORKDIR/.save_steps ]; then
    SAVE_STEPS=`cat $WORKDIR/.save_steps`
  fi

  if [ "$SAVE_STEPS" -eq "1" ]; then
    echo "[W] SkyForge will tarball state on each step. This will require a lot of space"
  fi

  skyforge_check_overlayfs
  modprobe overlay
  if [ "$?" != "0" ]; then
    echo "[W] No OverlayFS support in current kernel. Fast snapshots unavailable. Read docs"
    return 0
  fi

}

skyforge_check_overlayfs()
{
  [ "`grep overlay /proc/filesystems |wc -l`" != "1" ] && return 1
  return 0
}

skyforge_is_url()
{
  regex='(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'
  string="$1"
  [[ $string =~ $regex ]]
}

skyforge_hash()
{
  PREVIOUS="$CURRENT"
  tmp=( $* )
  tmp=${tmp[0]}
  for cmd in $SKIP_CHECKPOINTING; do
    [ "$tmp" == "$cmd" ] && return;
  done
  CURRENT=`echo "${CURRENT}.$*" | md5sum | cut -d" " -f1`
}

skyforge_cleanup()
{

#Not the most optimal, but gets the job done
  echo "Reading the sacred $SKYFILE..."
  for hash in `ls $WORKDIR|grep -v tgz`; do
    CURHASH=$hash
    DRY_RUN=1
    HASH_FOUND="`skyforge_run_skyfile $1`"
    if [ "$HASH_FOUND" == "KEEP" ]; then
        echo "Keeping $WORKDIR/$hash"
    else
        echo "Deleting $WORKDIR/$hash ($HASH_FOUND)"
        rm -rf $WORKDIR/$hash*
    fi
  done
  echo "Initial cleanup complete"
  echo "------------------------"
  unset CURHASH
  DRY_RUN=0
}

skyforge_kill_chroot_processes()
{
  # No root, no party
  [ ! -d rootfs ] && return 0

  PREFIX=`cd rootfs && pwd`
  FOUND=0

  for ROOT in /proc/*/root; do
      LINK=$(readlink $ROOT)
      if [ "x$LINK" != "x" ]; then
          if [ "x${LINK:0:${#PREFIX}}" = "x$PREFIX" ]; then
              # this process is in the chroot...
              PID=$(basename $(dirname "$ROOT"))
              echo "Killing PID $PID"
              kill -9 "$PID"
              FOUND=1
          fi
      fi
  done
  if [ "x$FOUND" == "x1" ]; then
    skyforge_kill_chroot_processes
  fi
}

skyforge_bind_mount()
{
  mount -o bind /proc/    ./rootfs/proc/
	mount -o bind /sys/     ./rootfs/sys/
	mount -o bind /dev/     ./rootfs/dev/
  mount -o bind /dev/pts  ./rootfs/dev/pts
}

skyforge_get_chroot_mounts()
{
  MPTH="`pwd`/rootfs/"
  echo "`mount | grep "$MPTH" | awk '{print $3}'`"
}

skyforge_bind_unmount()
{
  umount ./rootfs/proc/
  umount ./rootfs/sys/
  umount ./rootfs/dev/pts
  umount ./rootfs/dev/
  true
  for mpoint in `skyforge_get_chroot_mounts`; do
    umount $mpoint
  done
  if [ "`skyforge_get_chroot_mounts`" != "" ]; then
    echo "ERROR: We failed to unmount some filesystems from chroot, please do it manually"
  fi
}

skyforge_unmount_rootfs()
{
  #Interrupted invocations may leave multiple mounts over the same dir
  #Therefore - do recursive cleanup
  true
  while [ $? -eq "0" ]; do
    umount rootfs 2>/dev/null
  done
}

skyforge_delete_rootfs()
{
  skyforge_kill_chroot_processes
  skyforge_bind_unmount
  if [ $? == "0" ]; then
    rm -Rf rootfs
  else
    echo "ERROR: NOT purging chroot data"
  fi
}

skyforge_deb_get_depends()
{
  dpkg-deb -f $1 Depends|sed 's/,//g'|sed -e 's/\(([^]]*)\)//g'
}

skyforge_restore_rootfs()
{
  echo "Restoring rootfs from snapshot: $1"
  skyforge_delete_rootfs
  tar xpf $WORKDIR/$1.tgz
}

skyforge_directory_is_mountpoint()
{
  [ -d $1 ] || return 2
  DIR=`cd $1 && pwd`
  [ "`stat --format=%m $DIR`" == "$DIR" ] && return 0
  return 1
}

skyforge_overlay_add_layer()
{
  skyforge_directory_is_mountpoint rootfs

  if [ "$?" == "0" ]; then
    skyforge_unmount_rootfs
  fi

  skyforge_check_overlayfs

  if [ "$?" != "0" ]; then
  #No overlayfs? Bail out!
    return 0
  fi

  [ ! -d rootfs ] && mkdir -p rootfs

  STACK="`cat $WORKDIR/.stack`"
  if [ "$PREVIOUS" != "" ]; then
    STACK="$WORKDIR/.$PREVIOUS.data:$STACK"
  fi

  echo "$STACK" > $WORKDIR/.stack
  mkdir -p $WORKDIR/.work
  mkdir -p $WORKDIR/.$CURRENT.data
  mount -t overlay overlay -o \
  lowerdir=$STACK,upperdir=$WORKDIR/.$CURRENT.data,workdir=$WORKDIR/.work \
  rootfs
}

skyforge_execute_step()
{
  skyforge_hash "$*"

  #If we're only checking if this hash exists
  if [ ! -z $CURHASH ]; then
    if [ "$CURHASH" == "$CURRENT" ]; then
        echo -n "KEEP"
    fi
    return 0;
  fi

  if [ "$CURRENT" == "$PREVIOUS" ]; then
    PRINTHASH="--------------------------------"
  else
    PRINTHASH=$CURRENT
  fi

  #Status output. Should we skip this step?
  if [ -f $WORKDIR/$CURRENT ] && [ "$RERUN_FOLLOWING" -ne "1" ]; then
    echo "[S] $PRINTHASH | $* "
    NEED_RESTORE=1
    #Make sure to add it as overlay before bailing out
    skyforge_overlay_add_layer $CURRENT
    return 0;
  fi

  echo "[R] $PRINTHASH | $*"
  RERUN_FOLLOWING=1

  if [ "$DRY_RUN" -eq "1" ]; then
    return 0
  fi

  #Add a fresh overlay
  skyforge_overlay_add_layer $CURRENT

  #Or restore from a tarball if we're in dumb environment
  if [ "$NEED_RESTORE" -eq "1" ] && [ "$SAVE_STEPS" -eq "1" ]; then
    skyforge_restore_rootfs $PREVIOUS
    NEED_RESTORE=0
  fi

  eval "$*"

  if [ "$?" -eq "0" ]; then
    echo "[~] Now at $CURRENT"
    touch $WORKDIR/$CURRENT
    if [ "$SAVE_STEPS" -eq "1" ]; then
      tar cpzf $WORKDIR/$CURRENT.tgz rootfs
      echo "[~] Saved state to $WORKDIR/$CURRENT.tgz"
    fi
  else
    echo "[!] Oops, step $CURRENT failed"
    exit 1
  fi

}

skyforge_run_skyfile()
{
  if [ ! -f $1 ]; then
    echo "ERROR: Can't find Skyfile script $1"
    exit 1
  fi

  cat $1| grep -v '^$' | grep -v '^#' | sed "s/'/\\'/g" | \
    while IFS= read line; do
      case "`echo $line | awk '{print $1}'`" in
      INCLUDE)
        skyforge_run_skyfile `echo $line | awk '{print $2}'`
        ;;
      ARTIFACT)
        echo "`echo $line | awk '{print $2}'`" >> $WORKDIR/.cleanup
        ;;
      *)
        skyforge_execute_step "$line"
        ;;
      esac
  done
}

MULTISTRAP()
{
  multistrap -d rootfs -a ${1} -f ${2}
  R=$?
  [ "$R" != "0" ] && return $R

  #We have to map here from debian architecture names to qemu-static ones
  #That's a f*cking mess ;(
  ARCH=
  if [ "${1}" == "armel" ] || [ "${1}" == "armhf" ] || [ "${1}" == "arm" ]; then
    ARCH=arm
  fi

  if [ "${1}" == "arm64" ]; then
    ARCH=aarch64
  fi

  if [ "${1}" == "mips" ] || [ "${1}" == "mipsel" ]; then
    ARCH=${1}
  fi

  if [ "${1}" == "i386" ]; then
    ARCH=${1}
  fi

  if [ "${1}" == "powerpc" ]; then
    ARCH=ppc
  fi

  if [ "${1}" == "amd64" ]; then
    ARCH=x86_64
  fi

  #TODO: Other architectures here, please

  if [ -z "$ARCH" ]; then
   echo "[W] Didn't auto-detect proper qemu static binary to install, please install manually"
  else
    cp `which qemu-$ARCH-static` rootfs/usr/bin/
    echo "[I] Installing /usr/bin/qemu-$ARCH-static to target"
  fi

}

RUN()
{
  skyforge_bind_mount
  echo "$*" | chroot rootfs
  skyforge_kill_chroot_processes
  skyforge_bind_unmount
}

SH()
{
  $*
}

INSTALL()
{
  cp $1 rootfs/$1
}

REMOVE()
{
  rm -f rootfs/$1
}

STORE()
{
  tar cpzf $1 -C rootfs .
  echo "$1" >> $WORKDIR/.cleanup
}

PASSWD()
{
  RUN "echo -e '$1\n$1' | passwd root"
}

HOSTNAME()
{
    RUN "echo \"$1\" > /etc/hostname"
}

LOCALE()
{
  RUN "echo \"$*\" >> /etc/locale.gen"
  RUN locale-gen
}

IFACE_STATIC()
{
  RUN "echo auto $1 > /etc/network/interfaces.d/$1"
  RUN "echo iface $1 inet static >> /etc/network/interfaces.d/$1"
  RUN "echo   address $2 >> /etc/network/interfaces.d/$1"
  RUN "echo   netmask $3 >> /etc/network/interfaces.d/$1"
  RUN "echo   gateway $4 >> /etc/network/interfaces.d/$1"
}

IFACE_DHCP()
{
  RUN "echo auto $1 > /etc/network/interfaces.d/$1"
  RUN "echo iface $1 inet dhcp >> /etc/network/interfaces.d/$1"
}

APT_KEY()
{
  RUN wget -O- $1 \| apt-key add -
}

# FixMe: Bash-scripted replacing of symlinks showed a lot of hard to deal
# corner-cases with directories, symlinks pointing to symlinks, and other stuff.
# tar will do a way better job at this!
SYMLINK2COPY()
{
  cd rootfs
  tar -hcvpf ../.forge/rootfs.tmp.tgz .
  rm -Rf *
  tar -xpf ../.forge/rootfs.tmp.tgz
  rm -f ../.forge/rootfs.tmp.tgz
  cd ..
}

SYMLINK2RELATIVE()
{
  cd rootfs
  CURDIR=`pwd`
  find . -lname "/*" | while read l; do
      LINK="`readlink $l`"
      DIR=`dirname $LINK`
      NAME=`basename $LINK`
      SLASHES="`echo $l|sed 's/[^/]//g'|wc -m`"
      COUNT=$(($SLASHES-2))
      SLASHES=""
      while [ "$COUNT" -gt "0" ]; do
          SLASHES="$SLASHES../"
          COUNT=$((COUNT-1))
      done
      REL="${SLASHES}${DIR}/${NAME}"
      REL="`echo $REL | sed 's/\/\//\//g'`"
      cd "`dirname $l`"
      ln -sf $REL "`basename $l`"
      cd "$CURDIR"
  done
  cd ..
}

DENY_SERVICE_START()
{
  # Save yourself from daemons raging in chroot
  cat > rootfs/usr/sbin/policy-rc.d <<EOF
  #!/bin/sh
  exit 101
EOF
  chmod a+x rootfs/usr/sbin/policy-rc.d
}

ALLOW_SERVICE_START()
{
  rm rootfs/usr/sbin/policy-rc.d
}

DPKG_CONFIGURE()
{
  case "$1" in
    silent)
      ICMD="DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true"
    ;;
    interactive)
      ICMD=""
    ;;
    web)
    ICMD="DEBIAN_FRONTEND=web"
    ;;
    *)
      ICMD=$*
    ;;
  esac
  DENY_SERVICE_START
  RUN $ICMD LC_ALL=C LANGUAGE=C LANG=C /var/lib/dpkg/info/dash.preinst install
  RUN $ICMD LC_ALL=C LANGUAGE=C LANG=C dpkg --configure -a
  ALLOW_SERVICE_START
  export SKYFORGE_SYSTEM_CONFIGURED=yes
}

LDSOFIXUP()
{
  cd rootfs
  cat etc/ld.so.conf.d/* > etc/ld.so.conf
  cd ..
}

ADD()
{
  tar xpf $1 -C rootfs/$2
}

ADD_PACKAGES()
{
  DENY_SERVICE_START
  RUN apt-get -f -y --force-yes install $*
  ALLOW_SERVICE_START
}

ADD_DEB()
{
  DENY_SERVICE_START
  for line in $*; do
    skyforge_is_url "$line"
    if [ $? -eq "0" ]; then
      wget $line -O rootfs/tmp.deb
      RUN dpkg -i tmp.deb
      rm rootfs/tmp.deb
    else
      for deb in `ls $line`; do
        cp $deb rootfs/tmp.deb
        RUN dpkg -i tmp.deb
        rm -f rootfs/tmp.deb
        done
    fi
  done
  RUN apt-get -f -y --force-yes install
  ALLOW_SERVICE_START
}


makefsimage()
{
  NAME=$2
  SIZE=$1
  shift
  shift
  fallocate -l $SIZE $NAME
  [ -d $NAME.mount ] && umount $NAME.mount
  [ -d $NAME.mount ] || mkdir $NAME.mount
  mkfs.${FS} ${FSOPTS} $NAME $*
  mount -t ${FS} -o loop $NAME $NAME.mount
  cd rootfs && tar cpf - . | tar xpf - -C ../$NAME.mount; cd ..
  umount $NAME.mount
  rmdir $NAME.mount
}

EXT4IMAGE()
{
  FS=ext4
  FSOPTS="-O ^64bit,^metadata_csum"
  makefsimage $*
}

EXT3IMAGE()
{
  FS=ext3
  makefsimage $*
}

EXT2IMAGE()
{
  FS=ext2
  makefsimage $*
}

UIMAGE()
{
  KVERSION=`ls rootfs/boot/ |grep vmlinuz | cut -d"-" -f2-|tail -n1`
  DTB=$2
  if [ ! -f rootfs/boot/initrd.img-${KVERSION} ]; then
    echo "[W] No initrd found in rootfs, is initramfs-tools installed and initrd created?"
  else
    mkimage -A arm -T ramdisk -C none -n uInitrd -d rootfs/boot/initrd.img-${KVERSION} \
    rootfs/boot/uInitrd
  fi

  mkimage -a $1 -A arm -T kernel -n uImage -d rootfs/boot/initrd.img-${KVERSION} \
    rootfs/boot/uImage

}

BOOTSCRIPT()
{
  KVERSION=`ls rootfs/boot/ |grep vmlinuz | cut -d"-" -f2-|tail -n1`
  DTB=$2

  cat $1 | sed "s/@KVERSION@/${KVERSION}/g" | sed "s/@DTB@/${DTB}/g" > rootfs/boot/boot.scr.txt

  mkimage -A arm -T script -O linux -d rootfs/boot/boot.scr.txt rootfs/boot/boot.scr
}

usage()
{
  echo "SkyForge Firmware Builder v 0.1 (c) Andrew 'Necromant' Andrianov 2016"
  echo "Usage: $1 command"
  echo "Commands: "
  echo "  build          - build rootfs from Skyfile in current directory"
  echo "  clean          - Clean state unreferenced state files from .forge"
  echo "  purge          - Remove all stuff created by skyforge"
  echo "  tarball        - Developer mode: Save tgz snapshots for every step"
  echo "  status         - Print current steps and their status"
  echo "  replay hash    - Replay all actions starting with the one with specified hash"
  echo "  mount          - Mount the OverlayFS to ./rootfs"
  echo "TIP: You can specify the Skyfile to run with SKYFILE=mySkyfile skyforge blah"
  exit 1
}

if [ `whoami` != "root" ]; then
  echo "Sorry, you should run this tool as root"
  echo "Using a disposable environment (docker) is highly recommended"
  exit 1
fi

if [ "$#" -eq "0" ]; then
  usage $0
fi

skyforge_init
case "$1" in
  clean)
    skyforge_cleanup $SKYFILE
    skyforge_kill_chroot_processes
    skyforge_bind_unmount
    skyforge_unmount_rootfs
    echo "[I] Cleanup complete, rootfs unmounted"
  ;;
  build)
    skyforge_cleanup $SKYFILE
    #Full cleanup, just in case previous run was interrupted
    skyforge_kill_chroot_processes
    skyforge_bind_unmount
    skyforge_unmount_rootfs
    skyforge_run_skyfile $SKYFILE
    echo "[I] Your rootfs is now forged!"
  ;;
  purge)
    skyforge_kill_chroot_processes
    skyforge_bind_unmount

    [ -f "$WORKDIR/.cleanup" ] && cat $WORKDIR/.cleanup | while read line; do
      if [ -f $line ]; then
        echo "[i] Removing build artifact: $line"
        rm -f "$line"
      fi
    done

    echo "[i] Unmounting and removing target rootfs"
    skyforge_directory_is_mountpoint rootfs
    if [ $? -eq "0" ]; then
      skyforge_unmount_rootfs
    fi

    if [ $? -eq "0" ]; then
      skyforge_delete_rootfs
    fi

    echo "[i] Removing snapshots and runtime configuration"
    rm -Rf .forge

    echo "[I] Everything's been purged"
  ;;
  tarball)
    echo 1 > $WORKDIR/.save_steps
    echo "[I] Each build step will be tarballed now"
  ;;
  status)
    DRY_RUN=1
    skyforge_run_skyfile $SKYFILE
    ;;
  replay)
    rm -f ${WORKDIR}/${2}*
    ;;
  mount)
    DRY_RUN=1
    skyforge_run_skyfile $SKYFILE
    ;;
  *)
    usage $1
  ;;
esac
